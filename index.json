[{"categories":["建站笔记"],"content":"1. 设置代码仓库 首先确保你的 GitHub 上有这两个仓库：用来部署博客的 [用户名].github.io 和 用来存放 “源码” 的 hugo-backup。 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:1:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"2. 申请 Token 然后要去 GitHub 上申请一个新的 personal access token。 Token description 也就是 Token 的名字，可以随便填。然后一定要勾选上 repo 上的所以项目，然后别的项目一个都不要选。点 Generate token 生成 Token。 然后记下 Token 的值，也就是我打码的那一部分 (一定要记下来，因为离开这个页面之后就没有机会再次查看了) ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:2:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"3. 设置 Travis CI 接着来到 Travis CI，使用 GitHub 帐号登录；然后为 hugo-backup 源码仓库打上 ☑，然后点 setting。 找到Environment Variables，填写 相关信息。 Name 填写： GITHUB_TOKEN Value 填写：刚刚在 GitHub 申请到的 Token 的值 最后，点击add添加。 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:3:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"4. 编写 .travis.yml 在 Blog 的目录下创建并编辑一个 .travis.yml 文件。这个文件的作用是告诉 Travis CI 如何部署你的博客的，以下是标椎配置文件，相应地方要修改。 language:gogo:- \"1.8\"# 指定Golang 1.8# Specify which branches to build using a safelist# 分支白名单限制：只有 master 分支的提交才会触发构建# branches:# only:# - masterinstall:# 安装最新的hugo- wgethttps://github.com/gohugoio/hugo/releases/download/v0.51/hugo_0.51_Linux-64bit.deb- sudodpkg-ihugo*.deb# 安装主题- gitclone[你使用的主题的Git地址]script:# 运行hugo命令- hugoafter_script:# 部署- cd./public- gitinit- gitconfiguser.name\"[你的名字]\"- gitconfiguser.email\"[你的邮箱]\"- gitadd.- gitcommit-m\"Update Blog By TravisCI With Build $TRAVIS_BUILD_NUMBER\"# Github Pages- gitpush--force--quiet\"https://$GITHUB_TOKEN@${GH_REF}\"master:master# Github Pages- gitpush--quiet\"https://$GITHUB_TOKEN@${GH_REF}\"master:master--tagsenv:global:# Github Pages- GH_REF:[用来部署博客的Git地址]deploy:provider:pages# 重要，指定这是一份github pages的部署配置skip-cleanup:true# 重要，不能省略local-dir:public# 静态站点文件所在目录# target-branch: master # 要将静态站点文件发布到哪个分支github-token:$GITHUB_TOKEN# 重要，$GITHUB_TOKEN是变量，需要在GitHub上申请、再到配置到Travis# fqdn: # 如果是自定义域名，此处要填keep-history:true# 是否保持target-branch分支的提交记录on:branch:master# 博客源码的分支 根据实际情况改成这样： language:gogo:- \"1.8\"# 指定Golang 1.8# Specify which branches to build using a safelist# 分支白名单限制：只有 master 分支的提交才会触发构建# branches:# only:# - masterinstall:# 安装最新的hugo- wgethttps://github.com/gohugoio/hugo/releases/download/v0.72.0/hugo_extended_0.72.0_Linux-64bit.deb- sudodpkg-ihugo*.deb# 安装主题- gitclonehttps://github.com/dillonzq/LoveIt.gitthemes/LoveItscript:# 运行hugo命令- hugoafter_script:# 部署- cd./public- gitinit- gitconfiguser.name\"iwyang\"- gitconfiguser.email\"iwyang@qq.com\"- gitadd.- gitcommit-m\"Update Blog By TravisCI With Build $TRAVIS_BUILD_NUMBER\"# Github Pages- gitpush--force--quiet\"https://$GITHUB_TOKEN@${GH_REF}\"master:master# Github Pages- gitpush--quiet\"https://$GITHUB_TOKEN@${GH_REF}\"master:master--tagsenv:global:# Github Pages- GH_REF:github.com/iwyang/iwyang.github.io.gitdeploy:provider:pages# 重要，指定这是一份github pages的部署配置skip-cleanup:true# 重要，不能省略local-dir:public# 静态站点文件所在目录# target-branch: master # 要将静态站点文件发布到哪个分支github-token:$GITHUB_TOKEN# 重要，$GITHUB_TOKEN是变量，需要在GitHub上申请、再到配置到Travis# fqdn: # 如果是自定义域名，此处要填keep-history:true# 是否保持target-branch分支的提交记录on:branch:master# 博客源码的分支 然后将代码提交到 Blog 仓库 里。等个一两分钟，就可以在 Travis CI 上查看部署情况了 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:4:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"5. 双线部署 注意：首次部署时，先提交public文件夹到服务器，再备份源码到github，这样是为了将public文件夹关联到服务器仓库。此后都是先备份源码，再部署public文件夹。 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:5:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"5.1. 提交public文件夹到服务器 前提是你已经在服务器上搭建好hugo环境。 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@104.224.191.88:hexo.git git add . git commit -m \"$msg\" git push origin master --force ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:5:1","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"5.2. 备份源码到github 源码备份到github后， Travis CI 会自动部署Hugo，你甚至连 Hugo 都可以不装。 git remote rm origin git init git add . git commit -m \"备份源码\" git remote add origin git@github.com:iwyang/hugo-backup.git git push --force origin master PS:这里Git Bash开头会报错：warning: LF will be replaced by CRLF，解决方法：在git add .前面添加： git config --global core.autocrlf false 最终效果： # backup git config --global core.autocrlf false git add . git commit -m \"备份源码\" git push origin master --force 在自动部署脚本里也要作相应修改。 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:5:2","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"5.3. 双线部署脚本 以后为了方便，在根目录新建一个自动部署脚本deploy.sh： #!/bin/bash echo -e \"\\033[0;32mDeploying updates to gitee...\\033[0m\" # backup git config --global core.autocrlf false git add . git commit -m \"备份源码\" git push origin master --force # Removing existing files rm -rf public/* # Build the project hugo npm install npm run algolia # Go To Public folder cd public git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:5:3","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"6. 附录以及一些坑 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:6:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"6.1 添加 .gitignore 文件 在 Hugo 本地编译时会产生 public 文件夹，但是这个文件夹中的内容对于 hugo-backup仓库 来说是不需要的 (包括用来存放主题的 themes 文件夹和主题产生的 resources 文件夹也是不需要的) 我们可以用一个.gitignore 文件来排除这些内容 在博客根目录下创建并修改 .gitignore，然后提交到 GitHub。 public/* themes/* resources/* PS：如果.gitignore规则不生效，那是因为某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： git rm -r --cached . git add . git commit -m \"备份源码\" git push origin master --force 每次修改.gitignore规则，都要先把本地缓存删除，然后再提交。 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:6:1","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"6.2 Travis CI 的分支白名单 PS：我并没有进行此步操作。 我给你的 travis.yml 文件中有怎么一段: public/* themes/* resources/* s这一段的作用是限制触发构建的分支。这在正常开发中是很重要的配置，特别是在团队 (多人) 开发的场景中。不过这里不存在这个场景，并且如果配置错了会出很大的问题，很容易坑到小白， 如果你晓得这是干啥的，并且觉得有必要的话，可以考虑开启。 ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:6:2","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["建站笔记"],"content":"7. 参考链接 1.使用 Travis CI 自动部署 Hugo 博客 2.Git忽略规则及.gitignore规则不生效的解决办法 3.解决git中warning: LF will be replaced by CRLF ","date":"2020-06-08","objectID":"/github-travis-ci-and-fwq/:7:0","tags":["hugo"],"title":"Github+Travis CI+服务器双线部署hugo","uri":"/github-travis-ci-and-fwq/"},{"categories":["教学笔记"],"content":" 练习1 64+8= 35-16= 60-48= 53+18= 34+37= 100-83= 21+59= 40-25= 46+46= 91-29= 61-43= 79+12= 练习2 41-23= 6+69= 84-69= 36+55= 80-35= 28+28= 28+24= 91-43= 59+39= 79+11= 100-48= 51-23= 练习3 44+29= 97-18= 48+42= 90-59= 100-56= 18+77= 67-8= 28+56= 74-26= 45+49= 37+16= 97-29= 练习4 64-15= 26+65= 87+8= 62-35= 62+28 93-45= 23+19= 82-66= 31-13= 14+76= 100-68= 13+69= 练习5 55+19= 80-53= 43+37= 65-48= 100-31= 29+34= 47-18= 38+39= 92-23= 7+69= 28+15= 91-19= 练习6 54-16= 25+56= 53+17= 53-8= 19+12= 84-55= 25+18= 62-36= 66-48= 19+51= 100-39= 47+47= 练习7 49+8= 93-55= 37+13= 16+28= 100-19= 24+49= 90-22= 35+48= 82-15= 93-76= 63+29= 73-15= 练习8 59+15= 5+58= 41-14= 92-53= 58+33= 73-19= 80-11= 31-16= 38+28= 17+57= 100-61= 18+44= 练习9 43-8= 19+33= 54+18= 91-45= 46+44= 60-18= 75+15= 51-15= 74-38= 47+48= 100-34= 29+56= 练习10 78+18= 12+28= 70-39= 15+15= 100-47= 95-67= 66-19= 55-17= 19+15= 70-42= 84+7= 13+49= 练习11 8+77= 52-38= 78+16= 93-68= 14+29= 80-47= 83-28= 16+47= 42-18= 36+36= 100-29= 57+16= 练习12 39+19= 80-52= 59+33= 93-26= 33+17= 63-38= 81-28= 27+65= 97-9= 29+64= 100-59= 15+48= 练习13 49+48= 36+58= 76-19= 37-18= 39+15= 60-24= 80-18= 85-69= 39+4= 25+65= 100-44= 14+28= 练习14 87-28= 62+28= 54+16= 91-38= 42+19= 42-13= 9+62= 90-57= 31-14= 35+56= 100-15= 28+63= 练习15 37+23= 14+57= 71-13= 80-12= 47+35= 71-47= 62-38= 77+16= 17+63= 75-8= 100-32= 19+26= 练习16 76-29= 72-45= 19+78= 45+9= 100-57= 25+35= 39+13= 27+68= 70-15= 80-55= 49+17= 48-29= 练习17 38+34= 24+27= 92-57= 63-26= 100-21= 6+88= 90-47= 63-14= 34+19= 26+44= 48+25= 81-23= 练习18 62-19= 19+64= 50-27= 39+55= 75+17= 83-46= 27+16= 84-7= 67+13= 71-46= 100-12= 27+43= 练习19 54+38= 17+29= 93-58= 80-24= 68+16= 91-68= 72-17= 68+26= 55-8= 28+43= 100-73= 12+78= 练习20 81-42= 74-37= 44+48= 17+27= 48+27= 55-29= 38+32= 37+58= 30-14= 81-34= 100-72= 75+8= 练习21 45+39= 55-18= 74+18= 75-39= 77+13= 70-12= 84-46= 38+42= 75-16= 8+68= 100-54= 13+19= 练习22 72-39= 27+55= 56+26= 62-39= 49+11= 60-15= 63+27= 71-35= 53-17= 9+57= 100-24 16+18= 练习23 12+29= 73-35= 39+11= 38+45= 88-49= 40-21= 90-17= 24+67= 39+34= 74+7= 100-65= 91-13= 练习24 88-19= 79+16= 17+28= 91-32= 21+29= 85-36= 84-9= 27+27= 90-53= 37+35= 100-27 66+28= 练习25 56+38= 70-35= 55+26= 80-44= 18+17= 78-19= 19+48= 91-15= 38+8= 36-18= 100-78= 34+46= 练习26 74-16= 47+49= 68+18= 61-13= 56+15= 94-65= 23+17= 62-45= 62-4= 21+69= 100-85= 29+49= 练习27 5+29= 28+26= 80-49= 41-25= 47+39= 56-19= 18+32= 26+35= 53-25= 48+34= 100-66= 87-29= 练习28 65-39= 18+63= 76-58= 17+68= 34+17= 70-36= 57+6= 33-16= 47+37= 75-17= 100-74= 37+48= 练习29 95-38= 11+59= 56+16= 93-49= 58+14= 70-23= 89+7= 83-54= 41-13= 15+66= 100-81= 36+59= 练习30 57+15= 15+17= 61-14= 82-28= 47+15= 46-27= 12+18= 87-9= 76-38= 46+49= 100-77= 44+16= 练习31 98-19= 23+57= 39+24= 40-23= 64+28= 84-66= 45+28= 85-9= 91-69= 15+78= 100-86= 16+49= 练习32 48+22= 63-44= 39+17= 54-17= 48+32= 91-16= 82-14= 28+47= 51-29= 5+38= 100-41= 29+46= 练习33 96-57= 14+26= 49+26= 44-19= 14+78= 82-25= 67+29= 54-18= 50-25= 29+39= 100-26= 59+9= 练习34 36+29= 98-29= 51-33= 25+45= 59+37= 92-35= 81-43= 8+25= 58+26= 83-15= 100-45= 23+49= 练习35 61-44= 37+56= 58+24= 87-18= 69+17= 86-19= 64+16= 18+45= 64-47= 44-7= 100-33= 27+69= 练习36 27+54= 73-26= 44+28= 91-48= 61+29= 81-59= 33+38= 53-14= 60-22= 55+6= 100-38= 17+54= 练习37 97-58= 27+46= 76-39= 59+38= 67+25= 83-56= 60-14= 36+56= 9+37= 36+19= 100-69= 95-39= 练习38 65+17= 42-16= 49+33= 80-29= 47-19= 26+66= 36+14= 94-5= 17+24= 61-46= 100-35= 28+34= 练习39 91-17= 18+47= 59+13= 65-38= 16+48= 93-59= 48+14= 66+8= 94-37= 38+49= 100-53= 91-52= 练习40 82-23= 36+47= 50-22= 37+49= 55+35= 83-57= 71-12= 61-39= 34+57= 73+18= 100-18= 46+8= ","date":"2020-06-07","objectID":"/100-jia-jian-fa/:0:0","tags":["一年级数学","练习题"],"title":"100以内加减法练习题","uri":"/100-jia-jian-fa/"},{"categories":["建站笔记"],"content":"1. 安装vsftpd sudo yum install vsftpd -y 安装软件包后，启动vsftpd，并使其能够在引导时自动启动： sudo systemctl start vsftpd sudo systemctl enable vsftpd ","date":"2020-06-06","objectID":"/centos8-enable-ftp/:1:0","tags":["服务器"],"title":"centos8搭建ftp服务器","uri":"/centos8-enable-ftp/"},{"categories":["建站笔记"],"content":"2. 配置vsftpd vi /etc/vsftpd/vsftpd.conf 要仅允许某些用户登录FTP服务器，需要在userlist_enable=YES下面，加上： userlist_file=/etc/vsftpd/user_list userlist_deny=NO 启用此选项后，您需要通过将用户名添加到/etc/vsftpd/user_list文件（每行一个用户）来明确指定哪些用户可以登录。 完成编辑后，vsftpd配置文件应如下所示： anonymous_enable=NO local_enable=YES write_enable=YES local_umask=022 #anon_upload_enable=YES #anon_mkdir_write_enable=YES dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES #chown_uploads=YES #chown_username=whoever #xferlog_file=/var/log/xferlog xferlog_std_format=YES #idle_session_timeout=600 #data_connection_timeout=120 #nopriv_user=ftpsecure #async_abor_enable=YES #ascii_upload_enable=YES #ascii_download_enable=YES #ftpd_banner=Welcome to blah FTP service. #deny_email_enable=YES #banned_email_file=/etc/vsftpd/banned_emails #chroot_local_user=YES #chroot_list_enable=YES #chroot_list_file=/etc/vsftpd/chroot_list #ls_recurse_enable=YES listen=NO listen_ipv6=YES pam_service_name=vsftpd userlist_enable=YES userlist_file=/etc/vsftpd/user_list userlist_deny=NO ","date":"2020-06-06","objectID":"/centos8-enable-ftp/:2:0","tags":["服务器"],"title":"centos8搭建ftp服务器","uri":"/centos8-enable-ftp/"},{"categories":["建站笔记"],"content":"3. 重启vsftpd服 保存文件并重新启动vsftpd服务，以使更改生效： sudo systemctl restart vsftpd ","date":"2020-06-06","objectID":"/centos8-enable-ftp/:3:0","tags":["服务器"],"title":"centos8搭建ftp服务器","uri":"/centos8-enable-ftp/"},{"categories":["建站笔记"],"content":"4. 设置防火墙 最直接方法关闭防火墙。 ","date":"2020-06-06","objectID":"/centos8-enable-ftp/:4:0","tags":["服务器"],"title":"centos8搭建ftp服务器","uri":"/centos8-enable-ftp/"},{"categories":["建站笔记"],"content":"5. 创建FTP用户 创建一个新用户，名为admin: sudo adduser admin sudo passwd admin 将用户添加到允许的FTP用户列表中： echo \"admin\" | sudo tee -a /etc/vsftpd/user_list 设置正确的权限： sudo chmod 750 /home/admin sudo chown -R admin: /home/admin 如果遇到文件无法下载，可能需要更改文件所属用户组，例如： chown admin 文件名 ","date":"2020-06-06","objectID":"/centos8-enable-ftp/:5:0","tags":["服务器"],"title":"centos8搭建ftp服务器","uri":"/centos8-enable-ftp/"},{"categories":["建站笔记"],"content":"6. 参考链接 1.如何在CentOS 7上使用VSFTPD设置FTP服务器 2.基于 CentOS 搭建 FTP 文件服务 ","date":"2020-06-06","objectID":"/centos8-enable-ftp/:6:0","tags":["服务器"],"title":"centos8搭建ftp服务器","uri":"/centos8-enable-ftp/"},{"categories":["建站笔记"],"content":"1. 注册 Valine 注意右上角选择国际版。 你可以点击 LeanCloud ，注册登录，进入控制台后点击创建应用。 进入刚刚创建的应用，选择设置 》应用Keys，就能看到你的 APP ID 和 APP Key。 ","date":"2020-06-06","objectID":"/valine-email/:1:0","tags":["hugo"],"title":"hugo使用Valine并配置邮件提醒","uri":"/valine-email/"},{"categories":["建站笔记"],"content":"2. 修改config.toml 这里以LoveIt主题为例： # 评论系统设置 [params.page.comment] enable = true # Valine 评论系统设置 [params.page.comment.valine] enable = true appId = \"你的appId\" appKey = \"你的appKey\" placeholder = \"在这里留下足迹吧!\" avatar = \"mp\" meta= ['nick','mail'] pageSize = 10 lang = \"\" visitor = true recordIP = true highlight = true enableQQ = false serverURLs = \"\" ","date":"2020-06-06","objectID":"/valine-email/:2:0","tags":["hugo"],"title":"hugo使用Valine并配置邮件提醒","uri":"/valine-email/"},{"categories":["建站笔记"],"content":"3. 配置邮件提醒功能 ","date":"2020-06-06","objectID":"/valine-email/:3:0","tags":["hugo"],"title":"hugo使用Valine并配置邮件提醒","uri":"/valine-email/"},{"categories":["建站笔记"],"content":"3.1. 基础设置 在 设置》安全中心》服务开关中，关闭除了数据存储外的所有功能，并在下方 web 安全域名中添加好你的域名。 ","date":"2020-06-06","objectID":"/valine-email/:3:1","tags":["hugo"],"title":"hugo使用Valine并配置邮件提醒","uri":"/valine-email/"},{"categories":["建站笔记"],"content":"3.2. 配置 Valine Admin Valine Admin 是 Valine 评论系统的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。基于 Akismet API 实现准确的垃圾评论过滤。此外，使用云函数等技术解决了免费版云引擎休眠问题，支持云引擎自动唤醒，漏发邮件自动补发。兼容云淡风轻及 Deserts 维护的多版本 Valine。 3.2.1. 云引擎” 一键” 部署 1.在Leancloud云引擎界面，依次选择部署—部署项目—Git部署—配置Git，填写代码库并保存： https://github.com/DesertsP/Valine-Admin.git 2.在设置页面，设置环境变量以及 Web 二级域名。 SITE_NAME Bore’s Notes [必填] 博客名称 SITE_URL https://bore.vip/ [必填] 首页地址 SMTP_SERVICE QQ [新版支持] 邮件服务提供商，支持 QQ、163、126、Gmail 以及 更多 SMTP_USER xxxxxx@qq.com [必填]SMTP 登录用户 SMTP_PASS ccxxxxxxxxch [必填]SMTP登录密码，一般为授权码，而不是邮箱的登陆密码 SENDER_NAME bore [必填] 发件人 SENDER_EMAIL xxxxxx@qq.com [必填] 发件邮箱 ADMIN_URL https://xxx.avosapps.us/ [建议]Web 主机二级域名，用于自动唤醒 BLOGGER_EMAIL xxxxx@gmail.com [可选] 博主通知收件地址，默认使用 SENDER_EMAIL AKISMET_KEY xxxxxxxxxxxx [可选]Akismet Key 用于垃圾评论检测，设为 MANUAL_REVIEW 开启人工审核，留空不使用反垃圾 二级域名用于评论后台管理：例如 https://xxx.avosapps.us/，还可以绑定独立域名。 3.切换到部署标签页，分支使用 master，点击部署即可，第一次部署需要花点时间。 4.评论管理。访问设置的二级域名 https://二级域名.avosapps.us/sign-up，注册管理员登录信息。此后，可以通过 https://tding.avosapps.us/ 管理评论。也可以这样注册管理员登录信息： 设置后台管理登录信息，点击 存储 -\u003e 结构化数据，选择_User -\u003e 添加行，只需要填写password、username、email这三个字段即可, 使用 email 作为账号登陆、password 作为账号密码、username 任意即可。（为了安全考虑，此 email 必须为配置中的 SMTP_USER 或 TO_EMAIL， 否则不允许登录） 注：使用原版 Valine 如果遇到注册页面不显示直接跳转至登录页的情况，请手动删除_User 表中的全部数据。 此后，可以通过 https://二级域名.leanapp.cn/ 管理评论。 5.定时任务设置 目前实现了两种云函数定时任务： (1) 自动唤醒，定时访问 Web APP 二级域名防止云引擎休眠； (2) 每天定时检查 24 小时内漏发的邮件通知。 进入云引擎 - 定时任务中，创建定时器，创建两个定时任务。 选择 self-wake 云函数，Cron 表达式为 0 0/30 7-23 * * ?，表示每天早 6 点到晚 23 点每隔 30 分钟访问云引擎，ADMIN_URL 环境变量务必设置正确 选择 resend-mails 云函数，Cron 表达式为 0 0 8 * * ?，表示每天早 8 点检查过去 24 小时内漏发的通知邮件并补发 添加定时器后记得点击启动方可生效。 至此，Valine Admin 已经可以正常工作，更多以下是可选的进阶配置。 3.2.2. 邮件通知模板 邮件通知模板在云引擎环境变量中设定，可自定义通知邮件标题及内容模板。 环境变量 示例 说明 MAIL_SUBJECT ${PARENT_NICK}，您在 ${SITE_NAME} 上的评论收到了回复 [可选]@通知邮件主题（标题）模板 MAIL_TEMPLATE 见下文 [可选]@通知邮件内容模板 MAIL_SUBJECT_ADMIN ${SITE_NAME} 上有新评论了 [可选] 博主邮件通知主题模板 MAIL_TEMPLATE_ADMIN 见下文 [可选] 博主邮件通知内容模板 邮件通知包含两种，分别是被@通知（上面的 MAIL_TEMPLATE）和博主通知（上面的 MAIL_TEMPLATE_ADMIN），这两种模板都可以完全自定义。默认使用经典的蓝色风格模板。 默认被@通知邮件内容模板如下： \u003cdiv style=\"border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\"\u003e\u003ch2 style=\"border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\"\u003e您在\u003ca style=\"text-decoration:none;color: #12ADDB;\" href=\"${SITE_URL}\" target=\"_blank\"\u003e ${SITE_NAME}\u003c/a\u003e上的评论有了新的回复\u003c/h2\u003e ${PARENT_NICK} 同学，您曾发表评论：\u003cdiv style=\"padding:0 12px 0 12px;margin-top:18px\"\u003e\u003cdiv style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"\u003e ${PARENT_COMMENT}\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e${NICK}\u003c/strong\u003e回复说：\u003c/p\u003e\u003cdiv style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"\u003e ${COMMENT}\u003c/div\u003e\u003cp\u003e您可以点击\u003ca style=\"text-decoration:none; color:#12addb\" href=\"${POST_URL}\" target=\"_blank\"\u003e查看回复的完整內容\u003c/a\u003e，欢迎再次光临\u003ca style=\"text-decoration:none; color:#12addb\" href=\"${SITE_URL}\" target=\"_blank\"\u003e${SITE_NAME}\u003c/a\u003e。\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e 这里还提供一个彩虹风格的 @通知邮件模板代码： \u003cdiv style=\"border-radius: 10px 10px 10px 10px;font-size:13px; color: #555555;width: 666px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);\"\u003e\u003cdiv style=\"width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;\"\u003e\u003cp style=\"font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;\"\u003e您在\u003ca style=\"text-decoration:none;color: #ffffff;\" href=\"${SITE_URL}\"\u003e ${SITE_NAME}\u003c/a\u003e上的留言有新回复啦！\u003c/p\u003e\u003c/div\u003e\u003cdiv style=\"margin:40px auto;width:90%\"\u003e\u003cp\u003e${PARENT_NICK} 同学，您曾在文章上发表评论：\u003c/","date":"2020-06-06","objectID":"/valine-email/:3:2","tags":["hugo"],"title":"hugo使用Valine并配置邮件提醒","uri":"/valine-email/"},{"categories":["建站笔记"],"content":"4. 参考链接 1.Hexo-NexT 配置 Valine 2.Valine 评论系统配置邮件提醒功能 3.Valine Admin 配置手册 ","date":"2020-06-06","objectID":"/valine-email/:4:0","tags":["hugo"],"title":"hugo使用Valine并配置邮件提醒","uri":"/valine-email/"},{"categories":["建站笔记"],"content":"1. 配置gitee ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:1:0","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"1.1. 新建公共仓库 新建一个公共仓库，例如我建的仓库地址：https://gitee.com/iwyang/pics，注意一定要勾选使用Readme文件初始化这个仓库，否则后面会无法上传图片。 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:1:1","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"1.2. 获取私人令牌 依次点击右上角设置—私人令牌，在私人令牌描述中写上便于你了解该令牌用处的文字，并勾选需要的权限，PicGo要使用的私人令牌只需要user_info和projects权限，勾选上后提交，gitee将会返回私人令牌的token，保存该token，因为该token只会出现一次，离开页面过后再不会出现。 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:1:2","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2. 安装\u0026配置PicGo ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:0","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2.1. 安装PicGo 访问PicGo Releases直接下载你的操作系统对应的安装包并完成安装。 注：在安装的时候安装目录千万不能选C:\\Program Files\\下的任何地方，因为PicGo无法解析这一路径，如果你不知道安装在哪里的话，选择仅为我安装，否则在设置Typora时会出现错误。 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:1","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2.2. 配置PicGo 在PicGo设置里作如下修改： 设置日志文件：日志记录等级选择\"错误-Error\"和\"提醒-Warn\" 时间戳重命名：开 开启上传提示：开 上传后自动复制URL：开 选择显示的图床：只勾选githubPlus ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:2","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2.3. 安装npm 由于PicGo的插件需要使用npm进行安装，如果你的电脑上没有安装npm，那么你是无法安装PicGo插件的，而我们接下来要使用一个额外的插件获得gitee支持，所以在此之前先完成npm的安装。访问node.js的官网，根据官网的指导下载并安装node.js。安装为了解决npm速度过慢问题，需更换镜像源： npm config set registry https://registry.npm.taobao.org ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:3","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2.4. 安装github-plus插件 运行PicGo，单击插件设置，在搜索中输入github，安装搜索结果中的github-plus。 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:4","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2.5. 配置ithub-plus插件 repo: iwyang/pics branch: master token: 输入私人令牌 customUrl: 不用填 origin: gitee ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:5","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"2.6. 上传和管理图片 单击上传区，选择链接格式，使用点击上传或剪贴板图片上传，PicGo会自动上传图片并将符合链接格式的链接复制到剪贴板，你只要按下Ctrl+v即可粘贴图片的链接。 单击相册，你可以看到你上传的所有图片，你可以对所有图片进行复制链接，修改图片URL与删除操作，并可以批量复制或批量删除。 要注意的是，gitee支持外部链接的文件大小限制为1M（不过我也没试过）。 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:2:6","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"3. 配置Typora 点击Typora左上角的文件-\u003e偏好设置 在弹出的界面中点击图像，选择插入图片时选项为上传图片，并勾选对本地位置的图片应用上述规则和对网络位置的图片应用上述规则。 上传服务选项里选择PicGo(app)，PicGo路径选择PicGo.exe的绝对路径。 以后在Typora里插入本地图片时，它会利用PicGo自动帮你上传到gitee，并替换本地图片地址为gitee地址。 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:3:0","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["建站笔记"],"content":"4. 参考链接 1.Gitee图床+PicGo+Typora便捷在博客中使用图片 2.PicGo+Gitee(码云)搭建自己的图床 3.手把手教你用Typora自动上传到picgo图床 ","date":"2020-06-06","objectID":"/gitee-picgo-typecho/:4:0","tags":["hugo"],"title":"Gitee+Picgo+Typecho搭建hugo图床","uri":"/gitee-picgo-typecho/"},{"categories":["教学笔记"],"content":"口算十几减几的退位减法主要有有数数法、做减法想加法、破十法、平十法这几种方法，下面着重讲讲破十法与平十法。 ","date":"2020-06-04","objectID":"/first-grade-math-po-shi-and-ping-shi/:0:0","tags":["一年级数学"],"title":"一年级数学下册破十法和平十法","uri":"/first-grade-math-po-shi-and-ping-shi/"},{"categories":["教学笔记"],"content":"1. 破十法 破十法口诀：看大数，分出10，减小数，加剩数，一般会这样考你： 口算18-9= ( ) 时，可以这样想：先算(10)-(9)=(1)，再算(1)+(8)=(9) ","date":"2020-06-04","objectID":"/first-grade-math-po-shi-and-ping-shi/:1:0","tags":["一年级数学"],"title":"一年级数学下册破十法和平十法","uri":"/first-grade-math-po-shi-and-ping-shi/"},{"categories":["教学笔记"],"content":"2. 平十法 平十法口诀：分小数，减出10，10减几。 平十法就是连续减，例如18-9=( )，18个位上的8不够减9，那18减几最好够减，最好算的，18-8好算，所以先把9分成8和1，先算(18)-(8)=(10)，再算(10)-(1)=(9)。 ","date":"2020-06-04","objectID":"/first-grade-math-po-shi-and-ping-shi/:2:0","tags":["一年级数学"],"title":"一年级数学下册破十法和平十法","uri":"/first-grade-math-po-shi-and-ping-shi/"},{"categories":["教学笔记"],"content":"3. 参考链接 1.破十法和平十法的巧妙口诀 2.凑十法、破十法、连减法算理复习 ","date":"2020-06-04","objectID":"/first-grade-math-po-shi-and-ping-shi/:3:0","tags":["一年级数学"],"title":"一年级数学下册破十法和平十法","uri":"/first-grade-math-po-shi-and-ping-shi/"},{"categories":["建站笔记"],"content":"本文以 Loveit主题为例进行说明，记录一下怎样在hugo添加Algolia搜索以及自动化上传索引文件的方法。 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:0:0","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"1. 生成索引文件 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:1:0","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"1.1. Algolia创建空索引 创建应用，自取名字(注意：节点选择香港) 创建索引，自取名字(比如说hugo) 点击侧栏 API Keys，记录信息(Application ID, Search-Only API Key, Admin API Key) ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:1:1","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"1.2. Hugo生成索引文件 参考上文Hugo LoveIt主题配置与使用，修改config.toml相应Algolia参数即可。 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:1:2","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"2.上传索引文件 生成索引文件之后，我们需要上传到Algolia的服务器。 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:2:0","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"2.1. 手动上传 这一步是可选的，不过还是建议跟着做一下。 点击侧栏 Indices —Add records—Upload file按钮，上传上一步生成的 index.json 文件（具体位置在根目录public文件夹里）。 上传成功之后，我们就可以马上尝试搜索了，如果看到搜索的关键词有相应的匹配结果，那么就说明我们生成的索引文件是正确的。 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:2:1","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"2.2. 自动上传 这里我们采用npm包 atomic-algolia 来完成自动上传操作。准备条件：已经安装Node.js，安装过程略。 安装 atomic-algolia 包 npm init // 不懂的就一直回车就好了 npm install atomic-algolia --save 修改根目录下的 package.json 文件，在 scripts 下添加 \"algolia\": \"atomic-algolia\" \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\", \"algolia\": \"atomic-algolia\" }, 注意 \"test\" 那一行末尾有个英文逗号，不要漏了。 根目录下新建 .env 文件，内容如下： ALGOLIA_APP_ID=你的Application ID ALGOLIA_INDEX_NAME=你的索引名字 ALGOLIA_INDEX_FILE=public/index.json ALGOLIA_ADMIN_KEY=你的Admin API Key 上传索引的命令 你可以本地执行 npm run algolia 查看运行效果。后续就是把下面的命令加到你的自动部署脚本即可： npm install npm run algolia // 在hugo命令后面执行 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:2:2","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"2.3. 修改自动部署脚本 自动部署脚本改成这样： #!/bin/bash echo -e \"\\033[0;32mDeploying updates to gitee...\\033[0m\" # backup git add . git commit -m \"备份源码\" git push origin master --force # Removing existing files rm -rf public/* # Build the project hugo npm install npm run algolia # Go To Public folder cd public git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 至此，如果你运行 npm run algolia 没有报错的话，就成功了。 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:2:3","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"3. 参考链接 1.Hugo添加Algolia搜索支持 2.使用 Hugo + Algolia 进行静态站点搜索 ","date":"2020-06-03","objectID":"/hugo-theme-loveit-algolia/:3:0","tags":["hugo"],"title":"Hugo添加Algolia","uri":"/hugo-theme-loveit-algolia/"},{"categories":["建站笔记"],"content":"1. 安装主题 把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-06-03","objectID":"/hugo-theme-loveit/:1:0","tags":["hugo"],"title":"Hugo LoveIt主题配置与使用","uri":"/hugo-theme-loveit/"},{"categories":["建站笔记"],"content":"2. 配置主题 ","date":"2020-06-03","objectID":"/hugo-theme-loveit/:2:0","tags":["hugo"],"title":"Hugo LoveIt主题配置与使用","uri":"/hugo-theme-loveit/"},{"categories":["建站笔记"],"content":"2.1. 站点配置文件的修改 将根目录\\themes\\LoveIt\\exampleSite路径下的config.toml文件复制到根目录下，覆盖掉根目录下的config.toml文件。然后，我们在notepad++中打开并对其作一定的修改就可以直接使用，具体可以修改的内容如下： baseURL = \"https://bore.vip\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 主题 theme = \"LoveIt\" # 网站标题 title = \"Bore's Note\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 菜单配置 [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"归档\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 4 [[menu.main]] identifier = \"home\" pre = \"\" post = \"\" name = \"首页\" url = \"/\" title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 2 [[menu.main]] identifier = \"about\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 5 [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"本站主要用来收集整理资料、记录笔记，方便自己查询使用。\" # 网站关键词 keywords = [\"个人博客\", \"个人网站\",\"Bore's Note\",\"hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"https://github.com/iwyang/hugo\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"Bore's Note\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"hugo\" appID = \"R7GU8Q3PGK\" searchKey = \"03cd2f39cefdd4b40deed2f1222ad496\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"Bore's Note\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2020 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 10000 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 10000 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.jpg\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"一花一世界，一叶一菩提\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = false # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"\" Linkedin = \"\" Twitter = \"\" Instagram = \"\" Facebook = \"\" Telegram = \"\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = ","date":"2020-06-03","objectID":"/hugo-theme-loveit/:2:1","tags":["hugo"],"title":"Hugo LoveIt主题配置与使用","uri":"/hugo-theme-loveit/"},{"categories":["建站笔记"],"content":"2.2. 默认文章模板的修改 将根目录\\archetypes下的default.md修改如下： title: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\" subtitle: \"\" date: {{ .Date }} lastmod: {{ .Date }} draft: false toc: enable: true weight: false categories: [\"\"] tags: [\"\"] ","date":"2020-06-03","objectID":"/hugo-theme-loveit/:2:2","tags":["hugo"],"title":"Hugo LoveIt主题配置与使用","uri":"/hugo-theme-loveit/"},{"categories":["建站笔记"],"content":"2.3. LoveIt主题官方前置参数 ---title:\"我的第一篇文章\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# 位于 \"assets/\"# 或者# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# 位于 \"assets/\"# 或者# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和网站配置 中的 params.page.toc 部分相同. code: 和网站配置 中的 params.page.code 部分相同. math: 和网站配置 中的 params.page.math 部分相同. mapbox: 和网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和网站配置 中的 params.page.comment 部分相同. library: 和网站配置中的 params.page.library 部分相同. seo: 和网站配置中的 params.page.seo 部分相同. ","date":"2020-06-03","objectID":"/hugo-theme-loveit/:2:3","tags":["hugo"],"title":"Hugo LoveIt主题配置与使用","uri":"/hugo-theme-loveit/"},{"categories":["建站笔记"],"content":"3. 官方文档 更多内容可查看官方文档： 主题文档 - 基本概念 主题文档 - 内容 ","date":"2020-06-03","objectID":"/hugo-theme-loveit/:3:0","tags":["hugo"],"title":"Hugo LoveIt主题配置与使用","uri":"/hugo-theme-loveit/"},{"categories":["教学笔记"],"content":"一年级试卷居然出现了和差问题，题目意思大概是：已知两数之和是35，两数之差是5，求这两数是多少？小学没学过方程，只能用小学的方法来解决，这里用画图的方法来解决问题。 35+5=40 先假设两数一样多，求出的40就是两个大数之和 40-20=20 再求出大数 35-20=15 再求出小数 参考链接：小学奥数和差问题 ","date":"2020-06-03","objectID":"/first-grade-math-he-cha/:0:0","tags":["一年级数学"],"title":"一年级数学和差问题","uri":"/first-grade-math-he-cha/"},{"categories":["教学笔记"],"content":"求“括号最大能填几”，分两步计算。例如： (1) 39-( )＞14 第一步，先想比14大1的数是几？14+1=15； 第二步，再想39减几等于15，39-( )=15，答案是24。 (2) 84＞( )+12 第一步，先想比84小1的数是几，84-1=83； 第二步，再想几加12等于83，答案是71。 更多有关“括号最大能填几”内容，可查看：括号里最大能填几？ ","date":"2020-06-03","objectID":"/first-grade-math-zui-da/:0:0","tags":["一年级数学"],"title":"一年级数学括号最大能填几","uri":"/first-grade-math-zui-da/"},{"categories":["教学笔记"],"content":" 什么是“一图四式”呢？ **给出一个图，写出四个算式，两道加法算式，两道减法算式。**这类数学题的目的，是为了训练一年级小学生看图的能力，以及对加减法意义的理解。 口诀： 一图四式题，先来数左边，再来数右边， 两道加法题，左边加右边，右边加左边。 两位减法题，先来数总数， 总数减左边，就等于右边。 总数减右边，就等于左边。 参考链接：一年级数学“一图四式” ","date":"2020-05-28","objectID":"/first-grade-math-yi-tu-si-shi/:0:0","tags":["一年级数学"],"title":"一年级数学一图四式问题","uri":"/first-grade-math-yi-tu-si-shi/"},{"categories":["学习笔记"],"content":"1. 排除关键词 方法是：减号+关键词 功能是：排除一些 不想要的关键词 例如：锤子 -锤子手机 ","date":"2020-05-27","objectID":"/search-tips/:0:1","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"2. 精确搜索 方法是：给关键词加引号 功能是：只搜索引号里的字 ","date":"2020-05-27","objectID":"/search-tips/:0:2","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"3. 指定网站内搜索 方法是：site:域名+关键词（此处加号代表空格） 功能是：在指定网站内搜索 ","date":"2020-05-27","objectID":"/search-tips/:0:3","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"4. 指定文件格式 方法是：filetype:文件格式+关键词（此处加号代表关键词） 功能是：指定文件格式 ","date":"2020-05-27","objectID":"/search-tips/:0:4","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"5. 指定标题搜索 方法是：intitle:关键词 功能是：搜索结果必须在标题中 ","date":"2020-05-27","objectID":"/search-tips/:0:5","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"6. 两种指定范围搜索 锤子 intext:苹果:要求搜索结果中有这个关键词。 allintext:认知心理学 发展心理学 积极心理学 ：要求三个关键词都包括在搜索结果中。 inurl:关键字：要求在网页url中包含关键词。 ","date":"2020-05-27","objectID":"/search-tips/:0:6","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"7. 叠加使用 site:douban.com 亲密关系 intext:罗兰米勒 ","date":"2020-05-27","objectID":"/search-tips/:0:7","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"8. 注意事项 所有的冒号都是半角，也就是英文的冒号而不是中文的冒号。 空格很重要，关键词之间一定要有空格。 提取关键词很重要。 ","date":"2020-05-27","objectID":"/search-tips/:0:8","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"9. 参考链接 搜索效率提升200%！8个小技巧助你快速查资料 ","date":"2020-05-27","objectID":"/search-tips/:0:9","tags":["tips"],"title":"提高搜索效率的7个小技巧","uri":"/search-tips/"},{"categories":["学习笔记"],"content":"2020.5.26　已升级安装最新bios版本： 2018/9/3 版本：BIOS Version: E5CN63WW,EC Version:E5IT23WW Fn+F2进入bios，Fn+F12选择启动顺序。 打开联想服务的驱动与下载网页：查找驱动程序及工具软件，选择在站内查找设备驱动， 输入你的电脑主机编号（可以在电脑背面的标签上找到，也可以安装联想电脑管家，会自动检测你的主机编号），确定后进入驱动下载界面。联想小新700（主机编号：R90JZRF4）直接点击：小新 700-15ISK 在驱动列表中找到bios驱动，下载安装即可，当然，这个界面的所有驱动你都可以下载安装。 总结：如果升级完bios，每回重启完电脑声音总是静音的话，下载驱动人生，重新安装声卡驱动。此外升级bios后，可解决小新700无故自动休眠问题。 ","date":"2020-05-26","objectID":"/lenovo-update-bios/:0:0","tags":["win10","bios"],"title":"联想笔记本电脑升级bios","uri":"/lenovo-update-bios/"},{"categories":["建站笔记"],"content":"系统为centos8 Nginx默认目录：/usr/share/nginx/html Nginx主要配置文件：/etc/nginx/nginx.conf vi /etc/nginx/nginx.conf 将下面几行配置文件加入nginx配置的server段内： autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; 重启nginx服务： systemctl restart nginx 参考链接：centos8自定义目录安装nginx ","date":"2020-05-24","objectID":"/nginx-mu-lu/:0:0","tags":["nginx"],"title":"Nginx开启目录浏览","uri":"/nginx-mu-lu/"},{"categories":["学习笔记"],"content":"重装系统之前，要先卸载eset杀毒软件，装完系统再重新安装。 ","date":"2020-05-24","objectID":"/win10-reinstall-system/:0:0","tags":["win10"],"title":"Win10重装系统备忘","uri":"/win10-reinstall-system/"},{"categories":["学习笔记"],"content":"1. 原版系统 备份E盘文件到移动硬盘。 进PE，这里使用微pe工具箱。 将系统iso文件装载到虚拟光驱，然后运行setup.exe 先删掉所有分区，然后给C盘分区，大小为：82703M（80*1024+100+16+567+100=82703） 安装完系统再用系统自带磁盘管理给D盘和E盘分区，D盘大小为：71780M（70*1024+100=71780），剩下的给E盘。 ","date":"2020-05-24","objectID":"/win10-reinstall-system/:0:1","tags":["win10"],"title":"Win10重装系统备忘","uri":"/win10-reinstall-system/"},{"categories":["学习笔记"],"content":"2. 精简系统 备份E盘文件到移动硬盘。 进PE，这里使用微pe工具箱。 用DiskGenius分区，C盘80G，D盘70G，剩余给E盘。注意给C盘分区时，勾选建立ESP分区和建立MSR分区，勾选对齐到此扇区的整数倍，选择2048扇区。给D盘和E盘分区时也要勾选对齐到2048扇区。 用windows安装器安装系统。注意选择安装磁盘为C盘，还有选择相应的安装版本。 ","date":"2020-05-24","objectID":"/win10-reinstall-system/:0:2","tags":["win10"],"title":"Win10重装系统备忘","uri":"/win10-reinstall-system/"},{"categories":["学习笔记"],"content":"3. 系统安装记录 序号 日期 版本 1 2020.5.24 win10 2004 2 ","date":"2020-05-24","objectID":"/win10-reinstall-system/:0:3","tags":["win10"],"title":"Win10重装系统备忘","uri":"/win10-reinstall-system/"},{"categories":["学习笔记"],"content":"4. 总结 如果不是因为电脑配置低了，最好安装原版系统。 ","date":"2020-05-24","objectID":"/win10-reinstall-system/:0:4","tags":["win10"],"title":"Win10重装系统备忘","uri":"/win10-reinstall-system/"},{"categories":["读书笔记"],"content":" 由于疫情原因，前段时间在家，看了几部小说。感觉看完之后就完了，自己没有得到任何收获，有必要记下读书笔记。 《你当像鸟飞往你的山》是这段时间看的第一部小说，讲的是一个令人鼓舞的故事。主人公在十七岁之前从未上过学，后来通过自己的努力，摆脱原生家庭的影响，走向了成功。其实我们每个人面前都有一座山，我们要努力去翻过它。即使会历经艰难险阻，我们也要一直走下去，直到走向光明。特喜欢书中这样一段话： 无论你成为谁，无论你把自己变成了什么，那就是你本来的样子。它一直在你心中。不是在剑桥，而是在于你自已。你就是黄金。回到杨百翰大学，甚至回到你家乡的那座从地山，都不会改变你是谁。那可能会改变别人对你的看法，甚至也会改变你对自己的看法一即便是就金，在某些光线下也会显得晦暗， 但那只是错觉。金子一直是金子。 ","date":"2020-05-23","objectID":"/reading-note-of-educated/:0:0","tags":[""],"title":"《你当像鸟飞往你的山》读书笔记","uri":"/reading-note-of-educated/"},{"categories":["教学笔记"],"content":"大括号问题，是一年级数学一个必考题目，只有两种做法：加法或者减法。尽管很简单，我们依然要让孩子分清题目的不同表示方法，下面列出三种加法的表示： 大括号表示什么意思？表示两部分合起来！ 问号表示什么意思？表示需要求的问题！ 这里必须要注意的地方，是问题的答案必须写在等号的右边，这也是很多孩子容易犯的错误之一。就是把算式写错了，尽管知道正确的结果，但是写的位置不对！ 用 口诀加强理解： 大括号，小问号， 在一起，我会算。 小问号，在中间 求一共，用加法。 小问号，在一边， 求部分，用减法。 用这个口诀，可以加深孩子的印象。之后，我们就慢慢要给孩子用整体和部分来理解，因为这是理解加法和减法关系的基础。 解题步骤： 看？在哪儿 求什么 加还是减 参考链接：一年级数学上册《大括号问题》 ","date":"2020-05-23","objectID":"/first-grade-math-da-kuo-hao/:0:0","tags":["一年级数学"],"title":"一年级数学上册大括号问题","uri":"/first-grade-math-da-kuo-hao/"},{"categories":["学习笔记"],"content":" 首先打开需要操作的知excel表格。 然后在E2单元个中输入“=”号，添加辅助函数rand。 在E2单元格回车，专在E2单元格右下角下拉复制函数。 选择属排序和筛选升序、降序都可以。 最后可看到随机排序完成。 参考：excel如何随机排序 ","date":"2020-05-23","objectID":"/excel-rank-random/:0:0","tags":["wps"],"title":"wps表格如何随机排序","uri":"/excel-rank-random/"},{"categories":["教学笔记"],"content":"估算是数学里一种很重要的能力，一年级数学下册有关估算这部分内容出现在课本71页，主要讲的是两位数加两位数的进位加法的估算。首先来了解一下什么是估算，对于两位数加两位数的进位加法的估算，可以把其中一个加数看作与它最接近的“整十数”，也可以把两个加数分别看作与它们接近的“整十数”，再口算出得数。我们拿书上例题为例。淘气摘了17个苹果，笑笑摘了38个苹果，箱子能装60个苹果，让你估一估，这个箱子能装得下吗？ 这里有三种估法，如下： 方法一：把17看作20 20+38=58(个) 58＜60 答：这个箱子装得下。 方法二：把38看作40 17+40=57(个) 57＜60 答：这个箱子装得下。 方法三：把17看作20，把38看作40 20+40=60(个) 60=60 答：这个箱子装得下。 总结：三种估法都是往大了估。往大了估，可以装下，实际比估计的少，所以也能装下。 ------------------------------------------------------------------------------------------ 再看下72页练一练第1题，已知第一袋可装43颗珠子，第二袋可装19颗，第三袋能装38颗，现在70颗能穿一条项链。 问“估一估，哪两袋珠子合起来够穿一条项链”，这里要往小了估。答案如下： 把43看作40 40+38=78(颗) 78＞70 答：第一袋和第三袋能够穿一条项链。 总结：往小了估够70颗，实际比估计的多，肯定也够，所以第一袋和第三袋合起来能穿一条项链。 有时也也会遇到估算类填空题： 1.估算48+33时，可以把48看作（50），（50）+33=（83），结果是（83）。 2.估算48+33时，可以把48看作（50），把32看作（30），结果是（80）。 更多有关估算类的内容可以查看： 1.运用估算方法来解答应用题 2.估算应用题 ","date":"2020-05-20","objectID":"/first-grade-math-gu-suan/:0:0","tags":["一年级数学"],"title":"一年级数学下册估算问题","uri":"/first-grade-math-gu-suan/"},{"categories":["学习笔记"],"content":"依次选择视图—分页预览，单击选中后，我们看到文档多出了几条蓝色的实线，分出了第1页、第2页。如果我们想要调整打印的内容，只需要按住鼠标左键，拖动蓝色实线，上下左右移动到合适位置即可，最后查看打印预览，作最后的调整。 ","date":"2020-05-18","objectID":"/excel-fen-ye/:0:0","tags":["wps"],"title":"wps表格调整分页打印内容","uri":"/excel-fen-ye/"},{"categories":["建站笔记"],"content":"接上篇Centos8安装xfce\u0026vnc，接下来记下，怎样在centos 服务器上挂机。 ","date":"2020-05-18","objectID":"/centos8-gua-ji/:0:0","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"1. 安装、更新firefox ","date":"2020-05-18","objectID":"/centos8-gua-ji/:1:0","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"1.1. 安装firefox yum install firefox -y ","date":"2020-05-18","objectID":"/centos8-gua-ji/:1:1","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"1.2. 更新firefox 用你本地的旧版 firefox，访问http://www.firefox.com.cn，下载Linux版本的Firefox，因为我的是64位故选择的安装包是：”Firefox-latest-x86_64.tar.bz2“。 进入存放下载文件（Firefox-latest-x86_64.tar.bz2）的目录。 在该目录解压 Firefox-latest-x86_64.tar.bz2。 解压后会生成一个 firefox 子目录，里面有最新版本的 firefox 的二进制可执行文件，以及各种扩展模块，插件等等。 yum install tar -y yum install bzip2 -y tar -xjvf Firefox-latest-x86_64.tar.bz2 由于有时解压后出来的文件缺少文件（原因不明），可以采用在外部解压好后，直接拷贝出firefox文件夹的方式。 删除系统默认安装的旧版 firefox ，通常位于 /usr/lib64 目录下。 rm -rf /usr/lib64/firefox 将当前目录下的新版 firefox 子目录复制到 /usr/lib64 目录下。 mv firefox /usr/lib64 进入 /usr/bin 目录，删除其下的 firefox 脚本。 cd /usr/bin rm firefox 回到主目录或根目录，创建一个软链接，指向/usr/lib64/firefox/firefox。 cd ln -s /usr/lib64/firefox/firefox /usr/bin/firefox 查看下最新版本 firefox -v ","date":"2020-05-18","objectID":"/centos8-gua-ji/:1:2","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2. firefox优化 ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:0","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2.1. 设置开机启动 单击桌面下面最左边的那个X一样的图标选settings–Autostarted applications在弹出的对话框中点击Add,在name中输firefox,Description不用输入，Command中输入firefox如此firefox的开机启动也设置好了!接下来reboot一下看看是否能正常工作! ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:1","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2.2. 设置不保存历史记录 Edit–Preferences–Privacy 在firefox will后面的框里选Never remember history，还要勾选Delete cookies and site data when Firefox is closed ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:2","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2.3. 设置自动播放 依次选择隐私和安全—Permissions—Autoplay—Allow audio and Video ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:3","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2.4. 关闭FireFox恢复上次会话功能 在FF地址栏输入about:config再回车进入设置。 在过滤器中输入browser.sessionstore查找 将browser.sessionstore.max_tabs_undo的值改为0（把非法关闭后保存的Tab页数改为0） 将browser.sessionstore.max_windows_undo的值改为0（把保存的窗口数改为0） browser.sessionstore.resume_from_crash设为false（禁用恢复会话功能） 关闭about:config页，重启firefox 现在可以测试下，打开firefox，随便打开几个网页，再用任务管理器结束firefox.exe进程，再自己启动firefox，应该看不到那恢复会话窗口了。 ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:4","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2.5. 火狐禁止提交错误报告 依次选择隐私与安全—Firefox Data Collection and Use，取消勾选Allow firefox to send backlogged crash reports on your behalf ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:5","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"2.6. Firefox 禁止flash崩溃提示 搜索crash dom.ipc.plugins.reportCrashURL 改为false dom.ipc.plugins.flash.subprocess.crashreporter.enabled 改为false (崩溃报告可能会占很大空间，具体方法是删除 /root/.mozilla/firefox/Crash Reports/pending 里所有文件，即删除pending文件夹，按住shift键永久删除） ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:6","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"其它 解决 “Gah. Your tab just crashed error ” browser.tabs.remote.autostart 设为false ","date":"2020-05-18","objectID":"/centos8-gua-ji/:2:7","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"3. 安装配置挂机插件 ","date":"2020-05-18","objectID":"/centos8-gua-ji/:3:0","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"3.1. 安装插件 在火狐里安装插件。 ","date":"2020-05-18","objectID":"/centos8-gua-ji/:3:1","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"3.2. 配置插件 Start with Firefox，选择true Auto Add Playlists，选择true ","date":"2020-05-18","objectID":"/centos8-gua-ji/:3:2","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"4. 设置定时任务 cd /var/spool/cron vi root 00 00 * * * rm -rf /root/.vnc/*.log 01 00 * * * /sbin/reboot 00 06 * * * rm -rf /root/.vnc/*.log 01 06 * * * /sbin/reboot 00 12 * * * rm -rf /root/.vnc/*.log 01 12 * * * /sbin/reboot 00 18 * * * rm -rf /root/.vnc/*.log 01 18 * * * /sbin/reboot ","date":"2020-05-18","objectID":"/centos8-gua-ji/:4:0","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"5. 参考链接 1.centos系统crontab实现自动定时重启教程 2.centos7 更新Firefox版本 ​ ","date":"2020-05-18","objectID":"/centos8-gua-ji/:5:0","tags":["服务器"],"title":"Centos8挂机笔记","uri":"/centos8-gua-ji/"},{"categories":["建站笔记"],"content":"1. 安装 Xfce 桌面环境 yum install epel-release -y yum groupinstall xfce -y ","date":"2020-05-18","objectID":"/centos8-xfce-vnc/:1:0","tags":["服务器"],"title":"Centos8安装xfce\u0026vnc","uri":"/centos8-xfce-vnc/"},{"categories":["建站笔记"],"content":"2. 安装 VNC 服务器 yum install tigervnc-server -y 现在安装了 VNC 服务器，下一步是运行 vncserver 命令，该命令将创建初始配置并设置密码。 vncserver 系统将提示您输入并确认密码，以及是否将其设置为仅查看密码。如果您选择设置仅查看密码，则用户将无法使用鼠标和键盘与 VNC 实例进行交互。所以这里要选择n。 You will require a password to access your desktops. Password: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /root/.Xauthority does not exist 在继续下一步之前，首先使用 vncserver 带有 -kill 选项和服务器编号作为参数的命令停止 VNC 实例。在我们的例子中，服务器在端口 5901 (:1)中运行，因此我们将使用以下命令停止它： vncserver -kill :1 ","date":"2020-05-18","objectID":"/centos8-xfce-vnc/:2:0","tags":["服务器"],"title":"Centos8安装xfce\u0026vnc","uri":"/centos8-xfce-vnc/"},{"categories":["建站笔记"],"content":"3. 配置 VNC 服务器 现在我们的 CentOS 服务器上安装了 Xfce 和 TigerVNC ，下一步是配置 TigerVNC 使用 Xfce 。为此，请打开以下文件： vi ~/.vnc/xstartup 并将默认内容改为以下内容： #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 保存并关闭文件。无论何时启动或重新启动 TigerVNC 服务器，都将自动执行上述脚本。 如果需要将 附加选项 传递给 VNC 服务器，则可以打开 ~/.vnc/config 文件并在每行添加一个选项。最常见的选项列在文件中。取消注释并根据自己的喜好进行修改。这是一个例子： # securitytypes=vncauth,tlsvnc # desktop=sandbox geometry=1024x768 # localhost # alwaysshared dpi=96 ","date":"2020-05-18","objectID":"/centos8-xfce-vnc/:3:0","tags":["服务器"],"title":"Centos8安装xfce\u0026vnc","uri":"/centos8-xfce-vnc/"},{"categories":["建站笔记"],"content":"4. 创建 Systemd 单元文件 我们将创建一个 systemd 单元文件，使我们能够根据需要轻松启动，停止和重新启动 VNC 服务，与任何其他 systemd 服务相同。 sudo cp /usr/lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service 使用文本编辑器打开文件，并替换为以下内容（本例用户名为root）。 vi /etc/systemd/system/vncserver@\\:1.service [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=forking # Clean any existing files in /tmp/.X11-unix environment ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill %i \u003e /dev/null 2\u003e\u00261 || :' ExecStart=/usr/sbin/runuser -l root -c \"/usr/bin/vncserver %i\" PIDFile=/root/.vnc/%H%i.pid ExecStop=/bin/sh -c '/usr/bin/vncserver -kill %i \u003e /dev/null 2\u003e\u00261 || :' [Install] WantedBy=multi-user.target 保存并关闭文件。通知 systemd 我们创建了一个新的单元文件，让其重新加载： sudo systemctl daemon-reload 下一步是使用以下命令启用单元文件： sudo systemctl enable vncserver@:1.service 符号 1 后面的数字 @ 定义了 VNC 服务将在其上运行的显示端口，在我们的情况下，这是默认设置 1 ， VNC 服务器将在端口上侦听， 5901 如我们在上一节中讨论的那样。 执行以下命令启动 VNC 服务： sudo systemctl start vncserver@:1.service 验证服务是否已成功启动： sudo systemctl status vncserver@:1.service ● vncserver@:1.service - Remote desktop service (VNC) Loaded: loaded (/etc/systemd/system/vncserver@:1.service; enabled; vendor pr\u003e Active: active (running) since Mon 2020-05-18 14:00:12 CST; 23min ago Process: 806 ExecStart=/usr/sbin/runuser -l root -c /usr/bin/vncserver :1 (co\u003e Process: 767 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill :1 \u003e /dev/null \u003e Main PID: 1018 (Xvnc) Tasks: 0 (limit: 6193) Memory: 716.0K ","date":"2020-05-18","objectID":"/centos8-xfce-vnc/:4:0","tags":["服务器"],"title":"Centos8安装xfce\u0026vnc","uri":"/centos8-xfce-vnc/"},{"categories":["建站笔记"],"content":"5. 连接到 VNC 服务器 下载vnc viewer，输入ip:1登录。 ","date":"2020-05-18","objectID":"/centos8-xfce-vnc/:5:0","tags":["服务器"],"title":"Centos8安装xfce\u0026vnc","uri":"/centos8-xfce-vnc/"},{"categories":["建站笔记"],"content":"6. 参考链接 如何在 CentOS 7 上安装和配置 VNC ","date":"2020-05-18","objectID":"/centos8-xfce-vnc/:6:0","tags":["服务器"],"title":"Centos8安装xfce\u0026vnc","uri":"/centos8-xfce-vnc/"},{"categories":["学习笔记"],"content":" 按住alt键，拖动直线，会拉出一个尖点。 Ctrl+g 将绘图对象变成组，就不会覆盖；Ctrl+b将组打散。 flash中只有两种绘画对象：线条、填充。所有绘画对象都是由线条和填充组成的。 ","date":"2020-05-17","objectID":"/flash-tips/:0:0","tags":["flash","tips"],"title":"Flash小技巧","uri":"/flash-tips/"},{"categories":["教学笔记"],"content":"一年级比多比少类问题，应该说是一个难点。部分同学看见“多”就用加法，看见“少”就用减法，这样是不对的，一般说来比多比少类问题有三种题型，现在做个简单的总结，具体如下（题目选自网上）： 求“多多少”、“少多少”都用减法。 例如：小明有39张卡片，小华有23张，小华比小明少多少张卡片？（或者小明比小华多多少张卡片？） 求“较大数”用加法。 例如：小明有39张卡片，小华比小明多12张，小华有多少张卡片？ 或者：小明有39张卡片，比小华少12张，小华有多少张卡片？ 这两题其实是一样的，求的都是小华，求小华求的是较大数，所以用加法。 求“较小数”用减法。 例如：小明有39张卡片，小华比小明少12张，小华有多少张卡片？ 或者：小明有39张卡片，比小华多12张，小华有多少张卡片？ 这两题其实是一样的，求的都是小华，求小华求的是较小数，所以用减法。 ","date":"2020-05-16","objectID":"/first-grade-math-duo-shao/:0:0","tags":["一年级数学"],"title":"一年级数学比多比少类问题","uri":"/first-grade-math-duo-shao/"},{"categories":["教学笔记"],"content":"首先要记忆以下几个公式： 加数+加数=和 被减数-减数=差 和-加数=加数 被减数-差=减数 减数+差=被减数 要让他们将以上几个公式，写在数学书第一页上，然后背诵。列式计算具体习题如下： 1、一个加数是25，另一个加数是36，和是多少? 2、两个加数都是46，和是多少？ 3、一个加数是37，另一个加数比它多17，和是多少？ 4、被减数是56，减数是39，差是多少？ 5、两个加数的和是87，其中的一个加数是40，另一个加数是多少？ 6、被减数是56，差是34，减数是多少？ 7、减数是27，差是49，被减数是多少？ 8、72与45的差，再加上38是多少？ 9、36与45的和，再减去42是多少？ 10、86比20多多少？ 11、一个加数由3个十和4个一组成，另一个加数由2个十和7个一组成， 这两个加数的和是多少？ 12、30比90少多少？ 13、三个25连续相加，和是多少？ 14、从80里减去27，在加上25，和是多少？ 15、一个数是56，它比哪一个数大21，另一个数是多少？它们的和是多少？它们的和是多少？ 16、72和91相差多少？ 17、比85少39的数是多少？ 18、甲数是26，乙数是35，丙数是28，它们的和是多少？ 19、35与44的差，再加上30与16的和，得多少？ 题目选自：一年级下数学列式计算题及答案 ","date":"2020-05-16","objectID":"/first-grade-math-lie-shi/:0:0","tags":["一年级数学","练习题"],"title":"一年级数学下册列式计算练习题","uri":"/first-grade-math-lie-shi/"},{"categories":["学习笔记"],"content":"标题 # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:0:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"1. 字体 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:1:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"1.1. 加粗 要加粗的文字左右分别用两个*号包起来 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:1:1","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"1.2. 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:1:2","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"1.3. 删除线 要加删除线的文字左右分别用两个~~号包起来 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:1:3","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"1.4. 引用 在引用的文字前加\u003e即可。引用也可以嵌套，如加两个»三个»\u003e n个… ","date":"2020-05-16","objectID":"/markdown-yu-fa/:1:4","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"2. 分割线 三个或者三个以上的 - 或者 * 都可以。 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:2:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"3. 图片 ![](url) ","date":"2020-05-16","objectID":"/markdown-yu-fa/:3:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"4. 超链接 []() ","date":"2020-05-16","objectID":"/markdown-yu-fa/:4:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"5. 列表 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:5:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"5.1. 无序列表 无序列表用 - + * 任何一种都可以 - 列表内容 + 列表内容 * 列表内容 注意：- + * 跟内容之间都要有一个空格 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:5:1","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"5.2. 有序列表 数字加点 1. 列表内容 2. 列表内容 3. 列表内容 注意：序号跟内容之间要有空格 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:5:2","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"5.3. 列表嵌套 上一级和下一级之间敲三个空格即可 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:5:3","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"6. 表格 表头|表头|表头 ---|:--:|---: 内容|内容|内容 内容|内容|内容 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处省略 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:6:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"7. 代码 单行代码：代码之间分别用一个反引号包起来 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:7:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"8. 流程图 ​```flow st=\u003estart: 开始 op=\u003eoperation: My Operation cond=\u003econdition: Yes or No? e=\u003eend st-\u003eop-\u003econd cond(yes)-\u003ee cond(no)-\u003eop \u0026``` ","date":"2020-05-16","objectID":"/markdown-yu-fa/:8:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"9. 添加空格 在中文输入法的情况下：shift＋空格键切换至全角模式，之后再按空格键，那么空格键就会生效。 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:9:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":"10. 参考链接 1.Markdown 编辑器语法指南 2.Markdown基本语法 ","date":"2020-05-16","objectID":"/markdown-yu-fa/:10:0","tags":[""],"title":"markdown基本语法","uri":"/markdown-yu-fa/"},{"categories":["学习笔记"],"content":" 鼠标右键点击桌面左下角的开始菜单，选择“命令提示符（管理员） 在打开的黑色命令提示符窗口中输入 notepad，敲回车； 打开的记事本页面中点右上角的文件，然后点打开 C:\\Windows\\System32\\drivers\\etc\\hosts 在打开的host文件中修改你要添加的内容，最后保存。 ","date":"2020-05-16","objectID":"/win10-change-host/:0:0","tags":["win10"],"title":"Win10 修改host文件的方法","uri":"/win10-change-host/"},{"categories":["学习笔记"],"content":" 下载插件：官网下载地址：ICO (Windows Icon) Format ，找到ICO (Windows Icon) Format，然后根据系统选择相应版本，如Windows (64 bit)，进行下载。 复制下载的ICOFormat64.8bi，粘贴到D:\\Program Files\\Adobe\\Adobe Photoshop CC 2015\\Required\\Plug-Ins\\File Formats 重新打开Photoshop点击打开会显示有.ico和.cur文件，也可以对文件进行操作，然后另存为.ico格式和.cur格式。 参考链接：使Photoshop支持ICO图片、CUR图片格式 ","date":"2020-05-16","objectID":"/install-ico-plugin-in-photoshop-cc/:0:0","tags":["ps"],"title":"让Photoshop CC支持.ico格式","uri":"/install-ico-plugin-in-photoshop-cc/"},{"categories":["建站笔记"],"content":"首先当然是备份博客源文件。 ","date":"2020-05-16","objectID":"/hugo-qian-yi/:0:0","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":["建站笔记"],"content":"1. 更换服务器 参考： Hugo部署到centos —服务器操作部分 Hugo部署到ubuntu —服务器操作部分 ","date":"2020-05-16","objectID":"/hugo-qian-yi/:1:0","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":["建站笔记"],"content":"2. 更换电脑、重装系统 ","date":"2020-05-16","objectID":"/hugo-qian-yi/:2:0","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":["建站笔记"],"content":"2.1. 本地操作 参考：hugo部署到coding—本地操作部分，重新配置环境，生成公钥。 注意最后不用初始化hugo，因为我们已经有了博客原文件了。 ","date":"2020-05-16","objectID":"/hugo-qian-yi/:2:1","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":["建站笔记"],"content":"2.2. 服务器上的操作 如果是部署到服务器，先将服务器原来的SSH 公钥先删除，再上传新的SSH 公钥。具体操作如下: 服务器上输入： su git cd ~/.ssh rm -rf authorized_keys 本地Git Bash里输入： ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 如果在git bash中输入ssh git@服务器的IP地址,能够远程登录的话，则表示设置成功了。如若还是要输入密码，就修改目录权限： chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh ","date":"2020-05-16","objectID":"/hugo-qian-yi/:2:2","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":["建站笔记"],"content":"2.2. github\u0026gitee上的操作 如果是备份源码到githuhb上，部署网页到gitee上，要将重新生成的SSH公钥添加到github\u0026gitee上。两者都在右上角个人设置里添加。 ","date":"2020-05-16","objectID":"/hugo-qian-yi/:2:3","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":["建站笔记"],"content":"2.3. 本地最后调试 重装系统后，Algolia的自动提交索引功能要重新部署一遍，具体可查看：Hugo添加Algolia。最后还要在博客目录里重新关联远程仓库，还是一样先备份源码到github，再部署网页到相应服务器。 先备份源码，再部署网页，是为了GitInfo以及lastmod能够生效和更新，其实源码可以备份到github、gitee、coding中任意一个公开仓库都可以，当然备份到github最好。网页也无需和源码放在同一个代码托管平台上。 ","date":"2020-05-16","objectID":"/hugo-qian-yi/:2:4","tags":["hugo"],"title":"Hugo迁移笔记","uri":"/hugo-qian-yi/"},{"categories":[""],"content":"关于本站 本站主要用来收集整理资料、记录笔记，方便自己查询使用。 关于我 ","date":"2020-05-14","objectID":"/about/:0:0","tags":[""],"title":"关于","uri":"/about/"},{"categories":["建站笔记"],"content":"1. 启用阿里免费证书 ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:1:0","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"1.1. 申请证书 登录阿里云SSl证书控制台 在SSL证书页面，单击购买证书。 域名类型选单域名，证书类型选DV SSL，加密等级选择免费版。 接下来按操作进行，具体可参考：最新阿里云申请免费SSL证书教程 ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:1:1","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"1.2. 安装证书 基本操作参考：在Nginx/Tengine服务器上安装证书，这里具体讲下Nginx上的配置。 1.在nginx根目录（默认为/etc/nginx）下创建目录cert。 cd /etc/nginx mkdir cert 2.把下载的证书两个文件.pem和.key上传到目录cert中。 3.修改nginx配置文件。vi /etc/nginx/conf.d/hexo.conf server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/nginx/cert/xxxx.pem; ssl_certificate_key /etc/nginx/cert/xxxx.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 4.修改hugo站点配置文件_config.toml baseURL = \"https://bore.vip/\" 5.开启负载均衡 在阿里云SSl证书控制台，依次选择部署—负载均衡—选择所有区域，然后部署。 6.重启nginx服务。 ubuntu、centos 6 /etc/init.d/nginx restart centos 7、8 systemctl restart nginx ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:1:2","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"2. 添加 Let’s Encrypt 免费证书 ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:2:0","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"2.1. 申请 Let’s Encrypt 证书 2.1.1. 安装 Certbot 在 Ubuntu 上只需要简单的一行命令： sudo apt-get install letsencrypt 其他的发行版可以在这里选择。 2.1.2. 使用 webroot 自动生成证书 Certbot 支持多种不同的「插件」来获取证书，这里选择使用 webroot 插件，它可以在不停止 Web 服务器的前提下自动生成证书，使用 --webroot 参数指定网站的根目录。 letsencrypt certonly --webroot -w /var/www/hexo -d iwyang.top 这样，在 /var/www/hexo 目录下创建临时文件 .well-known/acme-challenge ，通过这个文件来证明对域名 iwyang.top 的控制权，然后 Let’s Encrypt 验证服务器发出 HTTP 请求，验证每个请求的域的 DNS 解析，验证成功即颁发证书。 生成的 pem 和 key 在 /etc/letsencrypt/live/ 目录下 cert.pem 用户证书 chain.pem 中间证书 fullchain.pem 证书链, chain.pem + cert.pem privkey.pem 证书私钥 ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:2:1","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"2.2. 配置 Nginx 修改 Nginx 配置文件中关于证书的配置，vi /etc/nginx/conf.d/hexo.conf server { listen 80; server_name iwyang.top www.iwyang.top; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name iwyang.top www.iwyang.top; ssl on; ssl_certificate /etc/letsencrypt/live/iwyang.top/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/iwyang.top/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 然后重启 Nginx ，应该就可以看到小绿标了。/etc/init.d/nginx restart ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:2:2","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"2.3. 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。 先运行以下命令来测试证书的自动更新： letsencrypt renew --dry-run --agree-tos 如果一切正常，就可以编辑 crontab 定期运行以下命令： crontab -e * 2 * * * service nginx stop \u0026 letsencrypt renew \u0026 service nginx start 有关cron 服务设置，更多可以看Ubuntu 16设置定时任务 PS：Ubuntu查看crontab运行日志 修改rsyslog sudo vim /etc/rsyslog.d/50-default.conf cron.* /var/log/cron.log #将cron前面的注释符去掉 重启rsyslog sudo service rsyslog restart 查看crontab日志 tail -f /var/log/cron.log ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:2:3","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"3. 参考链接 1.在Nginx/Tengine服务器上安装证书 2.阿里云hexo站点https之nginx配置 3.为博客添加 Let’s Encrypt 免费证书 4.ubuntu 生成https证书 for let’s encrypt 5.Ubuntu 16设置定时任务 6.Ubuntu查看crontab运行日志 7.Let’s Encrypt证书自动更新 ","date":"2020-05-14","objectID":"/enable-ssl-on-nginx/:3:0","tags":["nginx"],"title":"Nginx配置ssl证书","uri":"/enable-ssl-on-nginx/"},{"categories":["建站笔记"],"content":"1. 本地操作 参考: hugo部署到coding-本地操作部分 ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:1:0","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2. 服务器操作 注意：这里是参照服务器搭建hexo，所以代码里hexo没有改成hugo，不过这没有任何影响。 ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:0","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.1. 安装依赖 首先，在 服务器 上安装 Git 和 nginx。 apt-get update -y apt-get install git-core nginx -y ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:1","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.2. 配置用户 然后新增一个名为 git 的用户，过程中需要设置登录密码，先输入两次密码，然后按几次回车就可。 adduser git 给用户 git 赋予无需密码操作的权限（否则到后面 Hexo 部署的时候会提示无权限） chmod 740 /etc/sudoers vi /etc/sudoers 在图示位置root ALL=(ALL:ALL) ALL的下方添加 git ALL=(ALL:ALL) ALL 然后保存。然后更改读写权限。 chmod 440 /etc/sudoers ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:2","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.3. 上传 SSH 公钥 接下来要把本地的 ssh 公钥上传到 服务器 。执行 su git cd ~ mkdir .ssh \u0026\u0026 cd .ssh touch authorized_keys vi authorized_keys 现在要打开本地的 Git Bash，输入vi ~/.ssh/id_rsa.pub，把里面的内容复制下来粘贴到上面打开的文件里。 然后建立放部署的网页的 Git 库。 cd ~ mkdir hexo.git \u0026\u0026 cd hexo.git git init --bare 测试一下，如果在 Git Bash 中输入 ssh git@服务器的IP地址 能够远程登录的话，则表示设置成功了。 如果不成功，并且你的 服务器 的 ssh 端口不是 22 的话，请在Git Bash执行vi ~/.ssh/config，输入以下内容并保存：（成功就跳过这一步） Host #服务器 的 IP HostName #服务器 的 IP User git Port #SSH 端口 IdentityFile ~/.ssh/id_rsa ps: 如果配置完成还是提示要输入密码，可以使用 ssh-copy-id，在本地打开 Git Bash 输入： ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:3","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.4. 用户授权 接下来要给用户 git 授予操作 nginx 放网页的地方的权限： su cd /var/www mkdir hexo chown git:git -R /var/www/hexo ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:4","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.5. 配置钩子 现在就要向 Git Hooks 操作，配置好钩子： su git cd /home/git/hexo.git/hooks vi post-receive 输入内容并保存：（里面的路径看着换吧，上面的命令没改的话也不用换） #!/bin/bash GIT_REPO=/home/git/hexo.git TMP_GIT_CLONE=/tmp/hexo PUBLIC_WWW=/var/www/hexo rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予可执行权限： chmod +x post-receive ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:5","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.6. 配置 nginx 然后是配置 nginx。执行 su vi /etc/nginx/conf.d/hexo.conf server { listen 80 ; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 因为放中文进去会乱码所以就不在里面注释了。代码里面配置了默认的根目录，绑定了域名，并且自定义了 404 页面的路径。 最后就重启 nginx 服务器： /etc/init.d/nginx restart ps: 最好做一个301跳转，把bore.vip和www.bore.vip合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)： server { server_name bore.vip www.bore.vip ; if ($host != 'bore.vip' ) { rewrite ^/(.*)$ http://bore.vip/$1 permanent; } ... } ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:6","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"2.7. 修改自动部署脚本 #!/bin/bash echo -e \"\\033[0;32mDeploying updates to Coding...\\033[0m\" # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git remote rm origin git init git remote add origin git@你的ip:hexo.git git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:2:7","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"3. 参考链接 1.通过 Git Hooks 自动部署 Hexo 到 服务器 2.在服务器上搭建hexo博客，利用git更新 3.Windows10下Git环境变量配置 4.hexo d后 ERROR Deployer not found: git 5. Nginx 301重定向域名 ","date":"2020-05-14","objectID":"/hugo-install-on-ubuntu/:3:0","tags":["hugo","服务器"],"title":"Hugo部署到ubuntu","uri":"/hugo-install-on-ubuntu/"},{"categories":["建站笔记"],"content":"服务器环境：Centos 8 x64 本地环境：Win10 x64 ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:0:0","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"1. 本地操作 参考：hugo部署到coding-本地操作部分 ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:1:0","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2. 服务器操作 注意：这里是参照服务器搭建hexo，所以代码里hexo没有改成hugo，不过这没有任何影响。 准备工作：如果服务器端口不是22，先要更改SSH端口， vi /etc/ssh/sshd_config port 22 然后重启生效。 首先，在服务器上安装 Git 和 nginx。 yum update -y yum install git-core nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。 Nginx 安装完成后需要手动启动，启动Nginx并设置开机自启： systemctl start nginx systemctl enable nginx 如果开启了防火墙，记得添加 HTTP 和 HTTPS 端口到防火墙允许列表。 firewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https firewall-cmd --reload systemctl restart firewalld.service 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。 ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:0","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2.1. 配置用户 然后新增一个名为 git 的用户，过程中需要设置登录密码，输入两次密码即可。 adduser git passwd git 给用户 git 赋予无需密码操作的权限（否则到后面 Hexo 部署的时候会提示无权限） chmod 740 /etc/sudoers vi /etc/sudoers 在图示位置root ALL=(ALL:ALL) ALL的下方添加 git ALL=(ALL:ALL) ALL 然后保存。然后更改读写权限。 chmod 440 /etc/sudoers ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:1","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2.2. 上传 SSH 公钥 接下来要把本地的 ssh 公钥上传到服务器 。执行 su git cd ~ mkdir .ssh \u0026\u0026 cd .ssh touch authorized_keys vi authorized_keys 现在要打开本地的 Git Bash，输入vi ~/.ssh/id_rsa.pub，把里面的内容复制下来粘贴到上面打开的文件里。 接着把ssh目录设置为只有属主有读、写、执行权限。代码如下： chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh 然后建立放部署的网页的 Git 库。 cd ~ mkdir hexo.git \u0026\u0026 cd hexo.git git init --bare 测试一下，如果在 Git Bash 中输入 ssh git@服务器的IP地址 能够远程登录的话，则表示设置成功了。如果你的服务器端口不是22。最好像开头那样更改SSH端口。也可以参考：上传SSH公钥。 ps: 如果配置完成还是提示要输入密码，可以使用 ssh-copy-id，在本地打开 Git Bash 输入： ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:2","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2.3. 用户授权 接下来要给用户 git 授予操作 nginx 放网页的地方的权限： su mkdir -p /var/www/hexo chown git:git -R /var/www/hexo ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:3","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2.4. 配置钩子 现在就要向 Git Hooks 操作，配置好钩子： su git cd /home/git/hexo.git/hooks vi post-receive 输入内容并保存：（里面的路径看着换吧，上面的命令没改的话也不用换） #!/bin/bash GIT_REPO=/home/git/hexo.git TMP_GIT_CLONE=/tmp/hexo PUBLIC_WWW=/var/www/hexo rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予可执行权限： chmod +x post-receive ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:4","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2.5. 配置 nginx 然后是配置 nginx。执行 su vi /etc/nginx/conf.d/hexo.conf server { listen 80 ; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 因为放中文进去会乱码所以就不在里面注释了。代码里面配置了默认的根目录，绑定了域名，并且自定义了 404 页面的路径。 最后就重启 nginx 服务器： systemctl restart nginx 如果上传网页后，Nginx 出现 403 Forbidden，执行： vi /etc/selinux/config 将SELINUX=enforcing 修改为 SELINUX=disabled 状态。 SELINUX=disabled 重启生效，reboot。 ps: 最好做一个301跳转，把bore.vip和www.bore.vip合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)： server { server_name bore.vip www.bore.vip ; if ($host != 'bore.vip' ) { rewrite ^/(.*)$ http://bore.vip/$1 permanent; } ... } ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:5","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"2.6. 修改自动部署脚本 #!/bin/bash echo -e \"\\033[0;32mDeploying updates to Coding...\\033[0m\" # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git remote rm origin git init git remote add origin git@你的ip:hexo.git git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 或直接在Git Bash中手动运行以下代码： rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@104.224.191.88:hexo.git git add . git commit -m \"$msg\" git push origin master --force ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:2:6","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"3. 参考链接 1.在服务器上搭建hexo博客，利用git更新 2.从 0 开始搭建 hexo 博客 3.基于CentOS搭建Hexo博客 4.Nginx出现403 forbidden ","date":"2020-05-13","objectID":"/hugo-install-on-centos/:3:0","tags":["hugo","服务器"],"title":"Hugo部署到centos","uri":"/hugo-install-on-centos/"},{"categories":["建站笔记"],"content":"1. 本地操作 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:1:0","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"1.1. 安装GIt 本地需要安装 Git ，安装过程略。安装完git后还要配置环境变量： 右键我的电脑 –\u003e 属性，然后点击高级系统设置 –\u003e 环境变量 –\u003e 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址: D:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:1:1","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"1.2. 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入： git config --global user.name \"你的用户名\" git config --global user.email \"你的电子邮箱\" cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:1:2","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"1.3. 初始化 Hugo 1.3.1. 安装hugo windows10下安装hugo，可以参照Hugo官方手册的方法，这里讲一个相对简单稳定的方法。 1.下载hugo程序压缩包：前往https://github.com/gohugoio/hugo/releases下载和自己系统版本相符合的hugo程序压缩包。(建议下载hugo_extended版本) 2.解压到某个文件夹中（路径不要有中文，而且自己要记得文件夹的路径），最好是不常改动的文件夹下边，以防文件被误删或者丢失。 3.添加hugo到系统环境变量PATH中 找到“系统环境变量”的设置位置，在开始菜单的搜索栏搜索环境变量 添加用户环境变量，依此：点击环境变量，找到用户变量中的path，点击编辑，然后点击新建，在使用浏览按钮选中文件夹，即可使用hugo。（选中到hugo.exe所在的文件夹即可，不需要选中hugo.exe，貌似添加完系统变量，要重启电脑才能在Git Bash里运行hugo） 接下来，为了万无一失，还是要检查一下hugo是否安装完成。以管理员方式打开cmd命令窗口，然后输入以下指令： hugo version 如果得到如下响应，（即显示版本信息），说明安装成功，接下来就可以玩转hugo了。 Hugo Static Site Generator v0.70.0/extended windows/amd64 BuildDate: unknown 1.3.2. 创建并配置站点 以下命令均在’Git Bash’中运行 进入你想存放 Hugo 网站文件夹的目录，执行以下命令： hugo new site blog 1.3.3. 添加主题 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 附更新主题命令： cd ./themes/LoveIt/ git pull 配置主题 将 根目录\\themes\\even\\exampleSite路径下的config.toml文件复制到根目录下，覆盖掉根目录下的config.toml文件。然后，我们在notepad++中打开并对其作一定的修改就可以直接使用。 1.3.4. 配置config.toml baseURL = \"https://bore.vip\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 主题 theme = \"LoveIt\" # 网站标题 title = \"Bore's Note\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 菜单配置 [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"归档\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 4 [[menu.main]] identifier = \"home\" pre = \"\" post = \"\" name = \"首页\" url = \"/\" title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 2 [[menu.main]] identifier = \"about\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 5 [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"本站主要用来收集整理资料、记录笔记，方便自己查询使用。\" # 网站关键词 keywords = [\"个人博客\", \"个人网站\",\"Bore's Note\",\"hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"https://github.com/iwyang/hugo\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"Bore's Note\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"hugo\" appID = \"R7GU8Q3PGK\" searchKey = \"03cd2f39cefdd4b40deed2f1222ad496\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"Bore's Note\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2020 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 10000 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:1:3","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"2. 部署到coding ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:2:0","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"2.1. coding上的操作 操作和部署到github大同小异，首先要在coding上开通pages静态网站服务，注意以下几点： 项目地址按iwyang.coding.me来写，建议勾选“启用readme.md初始化项目” 配置SSH公钥时要勾选启用推送权限。 开启Coding Pages 服务，要先在项目设置—功能开关里开启持续集成和持续部署。然后进行实名认证：右上角—团队管理—团队设置—高级设置。 删除项目，点左下角—项目设置—更多。 添加自定义域名，添加cname记录，指向给你的网址。线路选默认。这样就保证国内线路走coding。 注意：一定要选首选的域名，并且非首选域名要勾选跳转至首选域名，不然有些第三方服务数据会统计不到一起。 开启 HTTPS，要先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，然后开启强制 HTTPS 访问。（不然会申请失败） 如果后面要用cdn全站加速，这里先不要开启ssl。 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:2:1","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"2.2. 提交本地仓库 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@e.coding.net:iwyang/hugo.git git add . git commit -m \"Add a new post\" git push --force origin master ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:2:2","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"2.3. 解决404错误 可是当你push完hugo生成的静态页面源码到你的repo中后点Coding给你分配的访问地址后却返回的是404页面，其实解决这个问题也很简单，就是点一下上图中的立即部署就行了。 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:2:3","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"2.4. 自动备份脚本 为了后续更新方便起见，可以在根目录新建一个一键自动部署脚本，命名为deploy.sh（如果对配置不做大的改动（例如：更换主题等），后续的更新可以使用以下脚本） #!/bin/bash echo -e \"\\033[0;32mDeploying updates to gitee...\\033[0m\" # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 创建完脚本以后，不要忘了加权限 chmod 777 xxx 附网上找到的另外两个部署脚本： 官方脚本： #!/bin/bash echo -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\" # Build the project. hugo # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 另外一个脚本： （如果用上面的自动部署脚本出现问题，可以试试这个，不过这个脚本部署时经常会导致部分页面丢失，还不知道原因） #!/bin/bash echo -e \"\\033[0;32mDeploying updates to Coding...\\033[0m\" # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git remote rm origin git init git remote add origin git@e.coding.net:iwyang/hugo.git git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:2:4","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"3. 部署到gitee 和部署到coding大同小异，但需要注意以下几点： 免费版gitee page不支持绑定域名、不支持自动部署，并且上传了代码服务里才有gitee pages选项。还有关于首页地址见官方文档： 如何创建一个首页访问地址不带二级目录的 pages，如ipvb.gitee.io？ 答：如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的仓库，如 https://gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.gitee.io直接访问，那么他就可以创建一个名字为ipvb的仓库 https://gitee.com/ipvb/ipvb 部署完成后，就可以以 https://ipvb.gitee.io 进行访问了。 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:3:0","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"3.1. 提交本地仓库 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@gitee.com:iwyang/iwyang.git git add . git commit -m \"Add a new post\" git push origin master --force ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:3:1","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"3.2. 备份hugo源码 git remote rm origin git init git checkout -b backup git add . git commit -m \"备份源码\" git remote add origin git@gitee.com:iwyang/iwyang.git git push origin backup --force ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:3:2","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"4. 备份hugo源码 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:4:0","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"4.1. 备份到gitee backup分支 在gitee上新建一个backup的分支，然后把下面代码加到deploy.sh末尾，这种方法有个问题，那就是themes等几个文件夹无法备份，因为这几个关联的仓库不一样，不过content文件夹备份了就行。 git remote rm origin git init git checkout -b backup git add . git commit -m \"备份源码\" git remote add origin git@gitee.com:iwyang/iwyang.git git push --force origin backup PS: 如果执行第三步git checkout -b backup后，提示fatal: A branch named 'backup' already exists.，则执行以下操作： git branch -D backup #删除分支:必须切换到其他的分之下才可操作 git checkout -b backup #切换分支 ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:4:1","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"4.2. 备份到github master分支 按理说备份到私人仓库为好，可为了GitInfo以及lastmod生效，需要新建一个公共仓库。（注意要先备份源码到github上，再部署public里的网页到服务器上，为了方便，需要在自动部署脚本里作相应设置） 再次强调，只有先备份了源码到github，再部署网页，lastmod才会更新 git remote rm origin git init git add . git commit -m \"备份源码\" git remote add origin git@github.com:iwyang/hugo-backup.git git push --force origin master 然后在config.toml里作如下修改 enableGitInfo = true gitRepo = \"https://github.com/iwyang/hugo-backup\" ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:4:2","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"},{"categories":["建站笔记"],"content":"5. 参考链接 1.Hugo+github搭建个人博客 (windows10) 2.如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？ 3.Hugo 从入门到会用 4.码云Pages ","date":"2020-05-13","objectID":"/hugo-install-on-coding-and-gitee/:5:0","tags":["hugo"],"title":"hugo部署到coding\u0026gitee","uri":"/hugo-install-on-coding-and-gitee/"}]